syntax = "proto3";

package consenseus;

option go_package = "github.com/mihir-sathe/consenseus/gen";

// The RPC spec for the raft protocol.
// Raft paper: https://raft.github.io/raft.pdf
service Consensus {
    //
    // RequestVote is invoked by candidates to gather votes.
    //
    // Arguments:
    // ---------
    // term -          candidate's term
    // candidateId -   the unique ID of the candidate requesting vote
    // lastLogIndex -  the index of candidate's last log entry
    // lastLogTerm -   the term when the last log entry was made
    //
    // Results:
    // -------
    // term -          current term from the responser for the candidate to update itself
    // voteGranted -   true if the candidate got the vote
    //
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);

    //
    // AppendEntries is invoked by leader to replicate log entries and also
    // acts as a heartbeat.
    //
    // Arguments:
    // ---------
    // term -          leader's term
    // leaderId -      the unique ID of the leader
    // prevLogIndex -  index of the log entry immediately preceeding
    //                 the new ones
    // prevLogTerm -   the term attached to the log at prevLogIndex
    // entries -       entries to append to the log; empty for a heartbeat
    // leaderCommit -  the commit index of the leader
    //
    // Results:
    // -------
    // term -          current term of the recipient for the leader to update itself
    // success -       true if the 
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
}

// The request object for the RequestVote RPC
message RequestVoteRequest {
    uint32 term = 1;
    string candidate_id = 2;
    uint64 last_log_index = 3;
    uint32 last_log_term = 4;
}

// The response object for the RequestVote RPC
message RequestVoteResponse {
    uint32 term = 1;
    bool vote_granted = 2;
}

// The request object for the AppendEntries RPC
message AppendEntriesRequest {
    uint32 term = 1;
    string leader_id = 2;
    uint64 prev_log_index = 3;
    uint64 prev_log_term = 4;
    repeated LogEntry entries = 5;
    uint64 leader_commit = 6;
}

message LogEntry {
    uint32 term = 1;
    bytes command = 2;
}

// The response object for the AppendEntries RPC
message AppendEntriesResponse {
    uint32 term = 1;
    bool success = 2;
}